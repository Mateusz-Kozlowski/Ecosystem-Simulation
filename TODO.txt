BRAIN INPUTS:
	better nearest food searching algo (with complexity better than the current one (O(f*a)))
		(that algo will likely be applicable to looking for food-animal collisions)

	different inputs for brains?

	remove log from input with hp?

CRAPPY NEURAL NETS:
	crappy neural nets should have a method that allows to set inputs before calling predict/train methods

	NEAT REAL TIME

SIDE MENU:
	side menu should be able to be opened not only using Esc key 
		but also using a gui widget which doesn't even exist yet

	after loading ecosystem side menu panel should be updated (e.g. speed scaler)

APP:
	dt can be extremelly big if a window lost the focus

	saving State?

	define states freezing

	<random> library? Check it out! Not C style of generating pseudorandom numbers

SIMULATION STATE:
	saving zoom/world camera can be useful

	avoid drawing things that are outside the window

CREATOR STATE:
	more/better ecosystems templates?

LOADING STATE:
	"fake async loading" - before loading render some text with information about loading and 
		after the process is complited stop rendering that text

GUI:
	rename neural net preview to sequential preview or sth like that

	one convention for all gui widgets, maybe even polimorphizm

	some GUI widgets positions are set relative to their centers and some are set relative to their
		left-top corners; add an ability to control their positions in these two ways

	NEAT-RT preview with ability to move neurons and save that changes

SIMULATION/ECOSYSTEM:
	carefully test saving and loading ecosystems

	there are 2 isPaused variables - in Ecosystem class and in Simulation state class
		get rid of one of them

	there is a BUG with ENERGY CONSERVATION law - ANIMALS can reach NEGATIVE hp

	update brain after stopping (and probably also after replacing and maybe others (there are no others... probably))

	implement info tool (probably it'll be able to give info not only about the entire ecosystem
		but also about particular animals if they are tracked at the moment or sth :) )

SHORTCUTS:
	speeding up and slowing down

	moving side panel
	
	every God tool:
		track (T)
		kill (K)
		replace (R)
		brain (B)
		stop (S)
		info (i)

	saving (Crtl+S)

	saving as (Crtl+Shift+S)

CODE/CONVENTIONS:
	mutation rate vs mutation percentage - unify that (probably mutation rate percentage)

	convention of names in tools 
		(->replace is also called move and it shouldn't have 2 names)(->track and select also)
		(rmv and delete? I used remove everywhere, but delete may be a better option)

	add consts to renders where it is possible (and also to other places)
	
	use sf::Vector2<T> instead of 2 floats

	overload some functions that contains sf::Vector2<T> using 2 primitives

	change all pointers to references (except where nullptr may be desired)

	replace std::string with const char* where possible

	replace std::vector with std::array when u deal with fixed size memory

	smart pointers should completly replace raw pointers

	in initKeybinds functions (are maybe in others that contains reading from files) 
		there are issues with if statements:
		replace sth like this:
			if(file.is_good())
			{
				reading from file...
			}
			else error
		with sth like this:
			if(!file.is_good()) error and exit(-1)
			
			reading from file...

	change speed_factor to simulation_speed_factor everywhere
		
	use EventsAccessors class wherever possible (including GUI classes)

	every mutator that changes more that one variable 
		(i mean change a variable but that change has further implications)
		should at the very start check if its arguments really changes sth
		(its argument can has the same value as a member that is about to be changed)

	in Ecosystem class there should be 2 different methods: getArenaSize and getWholeWorldSize - 
		the second one should include borders

	add to all methods info about which things do that method check 
		(so before calling user don't need to check them)
