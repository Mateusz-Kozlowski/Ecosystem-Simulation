brain inputs:
- better nearest food searching algo (with complexity better than the current one (O(f*a)))
  (that algo will likely be applicable to looking for food-animal collisions)
- different inputs for brains?
- remove log from input with hp?

side menu:
- side menu should be able to be opened not only using Esc key 
  but also using a gui widget which doesn't even exist yet
- after loading ecosystem side menu panel should be updated (e.g. speed scaler)

ResourceManager:
- implement some kind of resource managing framework

app:
- add a static class called FPS counter which can draw FPS count
- change the way of dealing with events:
  call State class handleEvent method from App class updateEvents method;
  states stack top will be feed with events; that state will do with those events whatever it wants,
  we can call it blackbox
- dt can be extremelly big if a window lost the focus
- define states freezing

simulation state:
- move that thing controling simulation speed factor from updateEcosystem method to getUpdatesFromGui
- saving zoom/world camera can be useful
- avoid drawing things that are outside the window
- add texture buttons in the top-right corners of all brain previews that will allow to move neurons,
  save that changes and maybe other things

UI:
- Google professional names of GUI widgets
- use move method in widgets
- static ResourceManager class
- hold fonts in static way and as keys use UNMUTABLE for the first font 
  and MUTABLE for the second font 
  (
    I don't remember their names...
    actually I remeber their names, they are called CONSOLAB and Retroica
    but I don't remeber which is which
  );
  keys can be represented as strings/const char* or maybe even sth different
- unhardcode btns sizes creating some static sf::Vector2fs for different kinds of btns 
- input field text shouldn't dance up and down
- there are 2 fonts; which should be used for what?
- add NEAT-RT preview class
- rename neural net preview to sequential preview or sth like that
- one convention for all gui widgets, maybe even polimorphizm
- some GUI widgets positions are set relative to their centers and some are set relative to their
  left-top corners; add an ability to control their positions in these two ways
- NEAT-RT preview with ability to move neurons and save that changes

simulation/ecosystem:
- mutate God tool!
- add big good events schedule, like killing 1/2 of the population every specific unit of time
- fix an issue with getWorldSize() and getArenaSize() in Ecosystem class;
  use the first one when u need the size with borders included 
  and the second when u need the size without borders included
- u can use store animals in std::unique_ptrs in Animal class;
  in order to clone an animal just create an empty brand new animal and then do this:
  *a1 = *a2
  where a1 and a2 are std::unique_ptrs;
  this line of code will call copy assigment operator of Animal class
- if killing animals sticking to borders will be needed 
  uncomment it and maybe change the way how it works
- in every function that loads something from a folder add is_directory function that checks if a folder exists at all;
  u can change all that functions so that they return bool instead of void
- every copy constructor and copy assigment operator should use its initializer list to initialize all its members
  like Animal class copy constructor (and the same thing with other constructors!)
- there is another issue with energy conservation law - animals can have a negative total energy
  (if they slow down)
- transfer energy from animals to fruits sometimes need to create a new fruit 
  if there are no fruits in a ecosystem
- total energy is not conservate - fix that!
- there is a BUG with ENERGY CONSERVATION law - ANIMALS can reach NEGATIVE hp
- update brain after stopping (and probably also after replacing and maybe others (there are no others... probably))

shortcuts:
- speeding up and slowing down
- moving side panel	
- every God tool:
  - track (T)
  - kill (K)
  - replace (R)
  - brain (B)
  - stop (S)
  - info (i)
- saving (Crtl+S)
- saving as (Crtl+Shift+S)

code:
- subtracting operator is overloaded in sf::Vector<T> class!
  use it EVERYWHERE!
- rewrite almost all classes and add asserts and exceptions
  and add info about when every class was refactored
  and estimated code cleanliness level
- and comments that separate private methods into some groups
  e.g., initialization, utils and so on...
- change arguments of all functions from std::strings to const char* where possible;
  notice that u can extract a const char* from every string using c_str() function
- throw exceptions where errors are "expected" and use asserts where errors shouldn't occur
- add functions arguments to exceptions because of functions overloading
- learn about inline functions and use them!
- all objects should be initialized in 100% before first updates
  e.g. neural net brain preview class should color its neurons in constructor 
  and not wait with that till the first update
- mutation rate vs mutation percentage - unify that (probably mutation rate percentage)
- convention of names in tools 
  (->replace is also called move and it shouldn't have 2 names)(->track and select also)
  (rmv and delete? I used remove everywhere, but delete may be a better option)
- add consts to renders where it is possible (and also to other places)
- use sf::Vector2<T> instead of 2 floats
- overload some functions that contains sf::Vector2<T> using 2 primitives
- change all pointers to references (except where nullptr may be desired)
- replace std::string with const char* where possible
- replace std::vector with std::array when u deal with fixed size memory
- smart pointers should completly replace raw pointers
- in initKeybinds functions (are maybe in others that contains reading from files) 
  there are issues with if statements:
  replace sth like this:

	if(file.is_good())
		reading from file...
	else 
		error

  with sth like this:

	if(!file.is_good()) 
		error and exit(-1)
			
	reading from file...

- change speed_factor to simulation_speed_factor everywhere
- use EventsAccessors class wherever possible (including GUI classes)
- every mutator that changes more that one variable 
  (i mean change a variable but that change has further implications)
  should at the very start check if its arguments really changes sth
  (its argument can has the same value as a member that is about to be changed)
- in Ecosystem class there should be 2 different methods: getArenaSize and getWholeWorldSize - 
  the second one should include borders
- add to all methods info about which things do that method check 
  (so before calling user don't need to check them)
